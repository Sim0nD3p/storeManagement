/*

console.log('allo');
                let n = 0;
                let array = [];
                let types = [];
                let restants = [];
                let total = [];
                let parts = [];
                let consommables = [];
                let bac1 = [];
                let bac2 = [];
                let palette = [];
                let bundle = [];
                this.store.PFEP.map((part, index) => {
                    if (part.emballage.TF.type) {
                        let type = part.emballage.TF.type;

                        
                        if(List.indexOf(part.code) !== -1){
                            n++
                            part.emballage.TF.type = this.store.getContainer('bac1')
                            console.log('------------------------------------------------------')
                        }
                        

                        if (type.type) { console.log(type) }

                        if (!type.type) {

                        }
                        
                        //PREDETERMINÉS BAC1
                        if (bac1Parts.indexOf(part.code) !== -1) {
                            bac1.push({[part.code]: part.emballage.TF.nbPieces});
                            part.emballage.TF.type = 'bac1';
                            //bac1
                        }
                        //PREDETERMINÉS BAC2
                        else if (bac2Parts.indexOf(part.code) !== -1) {
                            //bac2
                            bac2.push({[part.code]: part.emballage.TF.nbPieces})
                            part.emballage.TF.type = 'bac2'
                        }
                        //DANS LA LISTE POUR BAC1
                        else if(List.indexOf(part.code) !== -1){
                            bac1.push({[part.code]: part.emballage.TF.nbPieces});
                        }
                        else {
                            if (type.includes('TABLETTE') || type.includes('RACKING')) {
                                if (type.includes('BAC') == false && type.includes('BOITE') == false && type.includes('PALETTE') == false && type.includes('BOLT') == false && type.includes('DERRIERE') == false) {
                                    //direct sur etagere
                                    if (List.indexOf(part.code) !== -1) {   //list faite avec photos etageres
                                        part.emballage.TF.type = 'bac1'
                                    }
                                    else {                                        
                                            if(Math.max(Number(part.specs.length), Number(part.specs.width), Number(part.specs.height)) < 315){
                                                bac1.push({[part.code]: part.emballage.TF.nbPieces});
                                                part.emballage.TF.type = 'bac1';
                                                //bac 1
                                            }
                                            else if(Math.max(Number(part.specs.length), Number(part.specs.width), Number(part.specs.height)) < 645){
                                                //bac2

                                                bac2.push({[part.code]: part.emballage.TF.nbPieces})
                                               part.emballage.TF.type = 'bac2'
                                            }
                                            else if(Math.max(Number(part.specs.length), Number(part.specs.width), Number(part.specs.height)) > this.store.getContainer('bac2').inside.length){
                                                //trop grand pour bac
                                            }
                                            else{
                                                //pas de bac
                                                restants.push({[part.code]: part.family, type: type});
                                                if (types.indexOf(type) == -1) {
                                                    types.push(type)
                                                }
                                                
                                            }
                                        }
                                    }
                                }
                            if (type.includes('BAC') || type.includes('BOITE') || type.includes('DERRIERE') || type.includes('SOUS') || type.includes('RACK A BOULON') || type.includes('TS')) {
                                    if(Math.max(Number(part.specs.length), Number(part.specs.width), Number(part.specs.height)) < this.store.getContainer('bac1').inside.length){
                                        bac1.push({[part.code]: part.emballage.TF.nbPieces});
                                        part.emballage.TF.type = 'bac1';
                                        //bac 1
                                    }
                                    else if(Math.max(Number(part.specs.length), Number(part.specs.width), Number(part.specs.height)) < this.store.getContainer('bac2').inside.length && Math.max(Number(part.specs.length), Number(part.specs.width), Number(part.specs.height)) > this.store.getContainer('bac1').inside.length){
                                        //bac2

                                        part.emballage.TF.type = 'bac2'
                                        bac2.push({[part.code]: part.emballage.TF.nbPieces})
                                    }
                                    else if(Math.max(Number(part.specs.length), Number(part.specs.width), Number(part.specs.height)) > this.store.getContainer('bac2').inside.length){
                                        //trop grand pour un bac
                                    }
                                    else{
                                        //pas de bac
                                        restants.push({[part.code]: part.family, type: type});
                                        if (types.indexOf(type) == -1) {
                                            types.push(type)
                                        }
                                        
                                    }

                                //emballage = boite ou bac
                                //if(types.indexOf(type) == -1){ types.push(type) }

                            }
                            if (type.includes('PALETTE')) {
                                palette.push(part.code);
                                part.emballage.TF.type = 'palette'
                                //if(types.indexOf(type) == -1){ types.push(type) }

                            }
                            if (type.includes('BUNDEL')) {
                                bundle.push(part.code);
                                //if(types.indexOf(type) == -1){ types.push(type) }
                            }
                            if (type.includes('EMBALLAGE')) {
                                //if(types.indexOf(type) == -1){ types.push(type) }
                            }
                            if (type.includes('bac1')) {
                                //if(types.indexOf(type) == -1){ types.push(type) }
                            }

                            if (types.indexOf(type) == -1 && restants.indexOf(type) == -1) {
                                //restants.push(type)
                            }
                        }


                    }
                    else{
                        if(part.family){
                            if(part.family.includes('Extrusion') && part.family.includes('usin') == false){
                                bundle.push(part.code);
                                part.emballage.TF.type = 'bundle'
                                console.log(part);
                                
    
                            }
                            if(part.family.includes('Consommable')){
                                consommables.push(part.code)
                                part.emballage.TF.type = 'consom'

                            }

                        }
                    }

                })
                console.log('types')
                console.log(types)
                console.log(types.length)
                console.log('restants')
                console.log(restants)
                console.log(restants.length)
                console.log(total.length)
                console.log('parts')
                console.log(parts);
                console.log('bac1')
                console.log(bac1)
                console.log('bac2')
                console.log(bac2)
                console.log('palette');
                console.log(palette)
                console.log('bundle');
                console.log(bundle)
                console.log(`${bac1.length + bac2.length + palette.length + bundle.length + consommables.length} pieces placees`)
                this.store.bundleManager('EXS002-2425', 500)
                console.log(this.store.temp)
            
*/
class DEPOTOIR {


    initRacking_old(PFEP) {
        PFEP = this.filterParts(PFEP);  //enleve les pieces avec le tag barre de stephane, could go eventually
        let array = PFEP.map((item, index) => {
            if (item.storage.length > 0) {
                if (item.class) {
                    if (item.family && item.family !== 'Consommable' && item.family !== 'Collant') {
                        if (item.family !== 'Assemblage' && !item.family.includes('Extrusion usin')) {
                            return { code: item.code, type: 'MP', class: item.class, consoMens: item.consommation ? item.consommation.mensuelleMoy : undefined }
                        }
                        else return { code: item.code, type: 'assemblage', class: item.class, consoMens: item.consommation ? item.consommation.mensuelleMoy : undefined }
                    }
                    else if (!item.family) { return { code: item.code, type: 'MP', class: item.class, consoMens: item.consommation ? item.consommation.mensuelleMoy : undefined } }
                } else return { code: item.code, type: 'MP', class: item.class, consoMens: item.consommation ? item.consommation.mensuelleMoy : undefined }
            }
        })

        let array_new = PFEP.map((item, index) => {
            if (item.family && item.family !== 'Assemblage' && item.family.includes('usin')) {
                return { code: item.code, type: 'MP', class: item.class, consoMens: item.consommation ? item.consommation.mensuelleMoy : undefined }
            } else return { code: item.code, type: 'assemblage', class: item.class, consoMens: item.consommation ? item.consommation.mensuelleMoy : undefined }
        })
        array_new = array.filter(part => part !== undefined)
        term(`${array.length} parts should be placed in racking\n`)
        let object = this.getPriorityList(array)

        let MP = object.MP.map((mp, index) => { return this.app.store.getItemFromPFEP(mp.code) })
        let assemblages = object.assemblages.map((ass, index) => { return this.app.store.getItemFromPFEP(ass.code) })
        this.partLists = { MP: [...MP], assemblages: [...assemblages] }

        console.log(`MP ${MP.length}`)
        console.log(`assemblages ${assemblages.length}`)
        this.placeInRacking(MP, 'MP');
        this.placeInRacking(assemblages, 'ASS')
        this.optimizeRacking()
    }

    placeNewShelf_old(shelf) {
        let rackType = shelf.type == 'bac' ? 'mixed' : shelf.type;
        //console.log(`shelf.type ${shelf.type}`)
        //let shelfPriority = this.predictNewShelfPriority(partsToPlace.map(part => part.categorisation.consoMens))
        for (let i = 0; i < this.app.store.racking.length; i++) {
            this.app.store.racking[i].height = this.app.store.racking[i].getTotalHeight();
        }


        let baseHeight = 0;
        let targetRack;
        let potentialRacks = this.app.store.racking.map((rack, index) => {  //finds potential racks (length, type)
            if (shelf.length == rack.length && shelf.tag == rack.tag) { return rack }
            else return null
        })

        const getMaxHeight = (type) => {
            //bundle, bac, bUs, cus, pal

        }
        let maxHeight = getMaxHeight(shelf.type)
        for (let i = 0; i < this.app.store.racking.length; i++) {
            this.app.store.racking[i].searchPlace
        }

        potentialRacks = potentialRacks.filter((a) => a !== null)
        this.app.log += `\track options are:\n`
        potentialRacks.forEach(rack => this.app.log += `\t${rack.name}, ${rack.type}, ${rack.length}, ${rack.tag}\n`)

        //console.log('potentialRacks')
        //console.log(potentialRacks)

        if (potentialRacks.findIndex((a) => a !== null) == -1) {  //si aucun potential rack => create new rack
            let rack = new Racking(`racking_${this.app.store.racking.length + 1}`, shelf.length, rackType, shelf.tag)
            this.app.store.racking.push(rack)
            targetRack = rack
        }
        else {
            potentialRacks = potentialRacks.filter((a) => a !== null);   //filters potentialRacks (null)
            //console.log('potentialRacking')
            //console.log(potentialRacks)
            let options = potentialRacks.map((rack, index) => {
                return [rack.name, rack.searchPlace(shelf)]
            })
            for (let i = 0; i < potentialRacks.length; i++) {

                let place = potentialRacks[i].searchPlace(shelf, 'reach_limit')
                if (!isNaN(place) && rackType == potentialRacks[i].contentType) {
                    baseHeight = place
                    targetRack = this.getRacking(potentialRacks[i].name)
                }
                //ALGO TO FIND BEST POTENTIAL RACK
                //nb of shelf already on rack => priorityZone
                //we got to check for priority (consomMens)

                //console.log(potentialRacks[i].shelves.length)
                if (potentialRacks[i].shelves.length <= 5) {
                    //targetRack = this.getRacking(potentialRacks[i].name)
                }
            }
            if (targetRack == undefined) {
                let rack = new Racking(`racking_${this.app.store.racking.length + 1}`, shelf.length, rackType, shelf.tag)
                targetRack = rack
                this.app.store.racking.push(rack)
            }
        }
        //targetRack.getBlocs(shelf)       
        this.app.log += `\tPLACED ${shelf.name} in ${targetRack.name}\n`
        targetRack.addShelf(shelf, baseHeight)

    }

    optimizeRacking_old() {
        //makes sure that all shelves are placed in racking
        for (let i = 0; i < this.app.store.shelves.length; i++) {
            if (this.app.store.shelves[i].baseHeight == undefined) {
                this.placeNewShelf(this.app.store.shelves[i])
            }
        }


        //gets all shelves, organized by length
        let initShelvesObj = {}
        for (let i = 0; i < this.app.store.shelves.length; i++) {
            initShelvesObj = {
                ...initShelvesObj,
                [this.app.store.shelves[i].length]: {
                    ...initShelvesObj[this.app.store.shelves[i].length],
                    [this.app.store.shelves[i].name]: this.app.store.shelves[i]
                }
            }
        }

        let shelves = {}
        for (const length in initShelvesObj) {
            let currentLength = [];
            for (const shelf in initShelvesObj[length]) {
                currentLength.push(initShelvesObj[length][shelf])

            }
            shelves = {
                ...shelves,
                [length]: currentLength,
            }
        }

        let types = Object.keys(initShelvesObj)
        const height = (shelf) => {
            if (shelf.type == 'bac') { return 'reach_limit' }
            else if (shelf.type == 'bUs') { return 'reach_limit' }
            else return undefined
        }


        let racking = []
        for (let i = 0; i < types.length; i++) {
            console.log(types[i])
            shelves[types[i]].forEach(s => s.setTotalConsom())
            let order = shelves[types[i]].sort((a, b) => {
                if (a.type < b.type) return -1
                if (a.type > b.type) return 1

                if (a.totalConsommation < b.totalConsommation) return 1
                if (a.totalConsommation > b.totalConsommation) return -1

            })
            console.log('-----')
            order = order.map((s => console.log(s.name, s.totalConsommation)))
            console.log('---')


            let typeRacking = []
            let currentRack = new Racking('temp_1', order[0].length, order[0].type, order[0].tag)
            order.forEach(shelf => {
                let place = currentRack.searchPlace(shelf, height(shelf))
                if (place !== false && place !== undefined) {
                    currentRack.addShelf(shelf, place)
                }
                else {
                    if (typeRacking.findIndex(a => a.name == currentRack.name) == -1) { typeRacking.push(currentRack) }
                    let potential = typeRacking.map(rack => {
                        let place = rack.searchPlace(shelf, height(shelf))
                        if (place !== false && place !== undefined) { return [rack, place] }  //array [rack, baseHeight]
                        else return null
                    }).filter(a => a !== null)
                    if (potential.length > 0) {

                    }
                }

            })




            /* 
            shelves[types[i]].forEach(shelf => {
                let potential = racking.map(rack => {
                    if(rack.length == shelf.length && rack.tag == shelf.tag){
                        let height = height(shelf)
                        return [rack.name, this.app.store.rackManager.getRacking(rack.name).searchPlace(shelf, height(shelf))]
                    }
                }).filter(a => a[1] !== false)
                if(potential.length > 0){

                }
            })
                */

            shelves[types[i]].map((shelf, index) => {
                console.log(shelf.name, shelf.priority, shelf.content.length)

            })

        }
        /*
        loop thru racking assinging shelves (sorted by priority) around racking of same length
        check if rack with low height can be replaced by shelve on other racking

        */
        //console.log(shelves['4000'])





    }
}